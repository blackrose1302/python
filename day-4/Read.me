## Functions, Modules and Packages

## Functions ##

Function in python is block of sattements which runs only when it is called and returns the specific task.
It is defined using the "def" keyword. To call a function, use the function name followed by parenthesis.

def greet(name):
    return f"Hello, {name}!"

message = greet("XYZ")
print(message)

greet - function name , name - argument , def - keyword

## Module ##

Python Module is file containing Python definitions and statements that you want to include in your application.
A module can define functions, classes, and variables. Modules help organize and modularize your code, making it more maintainable.

save this file as test_module.py

def greeting(name):
  print("Hello, " + name) 

Now we can use the module we just created, by using the import statement:

import test_module 

test_module(Bhumika)

## Package ##

A package is a collection of modules organized in directories. Packages help you organize related modules into a hierarchy. They contain a special file named __init__.py, which indicates that the directory should be treated as a package.

eg Suppose you have a package structure as follows:

my_package/
    __init__.py
    module1.py
    module2.py

You can use modules from this package as follows:


from my_package import module1

result = module1.function_from_module1()

## Importing a package ##

Importing a package or module in Python is done using the import statement. You can import the entire package, specific modules, or individual functions/variables from a module.


# Import the entire module
import math

# Use functions/variables from the module
result = math.sqrt(16)
print(result)

# Import specific function/variable from a module
from math import pi
print(pi)

In this example, we import the math module and then use functions and variables from it. You can also import specific elements from modules using the from module import element syntax.

## Python Workspaces ##

Python workspaces refer to the environment in which you develop and run your Python code. They include the Python interpreter, installed libraries, and the current working directory. Understanding workspaces is essential for managing dependencies and code organization.

Python workspaces can be local or virtual environments. A local environment is the system-wide Python installation, while a virtual environment is an isolated environment for a specific project. You can create virtual environments using tools like virtualenv or venv.

# Create a virtual environment
python -m venv myenv

# Activate the virtual environment (on Windows)
myenv\Scripts\activate

# Activate the virtual environment (on macOS/Linux)
source myenv/bin/activate

Once activated, you work in an isolated workspace with its Python interpreter and library dependencies.
